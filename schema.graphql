"""
Autogenerated input type of Add
"""
input AddInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated input type of Assign
"""
input AssignInput {
  cardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of Assign.
"""
type AssignPayload {
  card: Card!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Board {
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CardConnection!
  id: ID!
  name: String!
}

type Card {
  """
  Users assigned to this card
  """
  assignees: [User!]!
  description: String!
  id: ID!
  name: String!

  """
  Status of the card
  """
  status: String!
}

"""
The connection type for Card.
"""
type CardConnection {
  """
  A list of edges.
  """
  edges: [CardEdge]

  """
  A list of nodes.
  """
  nodes: [Card]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Card
}

"""
Possible orders for a card list
"""
enum CardOrder {
  DEADLINE_ASC
  DEADLINE_DESC
  STATUS_ASC
  STATUS_DESC
}

"""
Possible statuses for a card
"""
enum CardStatus {
  """
  Done
  """
  DONE

  """
  In progress
  """
  IN_PROGRESS

  """
  To do
  """
  TO_DO
}

type Mutation {
  addBoard(
    """
    Parameters for Add
    """
    input: AddInput!
  ): Board!
  addCard(
    """
    Parameters for addCard
    """
    input: addCardInput!
  ): Card!
  assignCard(
    """
    Parameters for Assign
    """
    input: AssignInput!
  ): AssignPayload
  removeCard(
    """
    Parameters for Remove
    """
    input: RemoveInput!
  ): RemovePayload
  unassignCard(
    """
    Parameters for Unassign
    """
    input: UnassignInput!
  ): UnassignPayload
  updateCard(
    """
    Parameters for Update
    """
    input: UpdateInput!
  ): Card!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Fetch a specific board by its ID, belonging to the current user.
  """
  board(
    """
    The unique identifier of the board.
    """
    id: ID!
  ): Board!

  """
  Retrieve a list of all boards that belong to the current user.
  """
  boards: [Board!]!

  """
  Fetch a specific card by its ID, belonging to the current user.
  """
  card(
    """
    The unique identifier of the board.
    """
    id: ID!
  ): Card!

  """
  Retrieve a list of all cards that belong to the current user.
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order results
    """
    orderBy: CardOrder

    """
    find specific cards by name or description
    """
    query: String

    """
    filter by status of the card to_do, in_progress, done
    """
    status: CardStatus
  ): CardConnection!
}

"""
Autogenerated input type of Remove
"""
input RemoveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of Remove.
"""
type RemovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of Unassign
"""
input UnassignInput {
  cardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of Unassign.
"""
type UnassignPayload {
  card: Card!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of Update
"""
input UpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String

  """
  Card ID
  """
  id: ID!
  name: String
  status: CardStatus
}

type User {
  email: String!
  id: ID!
}

"""
Autogenerated input type of addCard
"""
input addCardInput {
  boardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String!
  name: String!
  status: CardStatus!
}
