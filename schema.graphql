type Board {
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CardConnection!
  id: ID!
  name: String!
}

type Card {
  """
  Users assigned to this card
  """
  assignees: [User!]!
  description: String!
  id: ID!
  name: String!
}

"""
The connection type for Card.
"""
type CardConnection {
  """
  A list of edges.
  """
  edges: [CardEdge]

  """
  A list of nodes.
  """
  nodes: [Card]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Card
}

type Mutation {
  """
  An example field added by the generator
  """
  testField: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Fetch a specific board by its ID, belonging to the current user.
  """
  board(
    """
    The unique identifier of the board.
    """
    id: ID!
  ): Board!

  """
  Retrieve a list of all boards that belong to the current user.
  """
  boards: [Board!]!
}

type User {
  email: String!
  id: ID!
}
